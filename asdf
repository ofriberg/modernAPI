define([
    "dojo/dom",
    "dojo/_base/declare",
    "dojo/_base/lang",
    "mpp/widgets/_TranslationMixin",
    "mpp/widgets/_StandbyMixin",
    "mpp/modules/model",
    "mpp/modules/helper/activePlanHelper",
    "mpp/modules/helper/planType",
    "dijit/_TemplatedMixin",
    "dojo/text!./templates/StatusPopover.html",
    "dojo/on",
    "dojo/dom-class",
    "dojo/_base/array",
    "mpp/modules/statuses",
    "mpp/widgets/_ModelAwareMixin",
    "mpp/modules/constants",
    "dojo/topic",
    "dojo/fx",
    "dijit/_WidgetsInTemplateMixin",
    "dojo/i18n!translations/nls/resourceBundle",
    // template
    "mpp/modules/errorHandler",
    "mpp/modules/baseFlow",
    "mpp/widgets/Select",
    "mpp/widgets/ExcludedModulesConfirmationModal",
], function (
            dom,
            declare,
            lang,
            _TranslationMixin,
            _StandbyMixin,
            model,
            activePlanHelper,
            planType,
            _TemplatedMixin,
            template,
            on,
            domClass,
            array,
            statuses,
            _ModelAwareMixin,
            constants,
            topic,
            fx,
            _WidgetsInTemplateMixin,
            resourceBundle,
            errorHandler,
            baseFlow
             ) {

    return declare("mpp/widgets/StatusPopover", [_TranslationMixin, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelAwareMixin, _StandbyMixin], {

        templateString: template,
        _status: null,
        targetStatus: null,
        popup: null,
        isMissingPrices: false,
        statusModel: null,
        activePlan: null,
        eventCleanup: [],

        constructor: function () {

            this.statusModel = model({
                selectedGroup: null,
                inactiveStatus: statuses.statusPlan.getStatus(),
                activeStatus: statuses.statusActiveAgreement.getStatus(),
                inactiveStatusConstraints: {
                    options: [
                        {
                            "value": statuses.statusPlan.getStatus(),
                            "label": statuses.statusPlan.getStatusSuffixString()
                        },
                        {
                            "value": statuses.statusQuotation.getStatus(),
                            "label": statuses.statusQuotation.getStatusSuffixString()
                        }
                    ]
                },
                activeStatusConstraints: {
                    options: [
                        // få bort den övre när det är flex vi talar om
                        {
                            "value": statuses.statusActivePlan.getStatus(),
                            "label": statuses.statusActivePlan.getStatusSuffixString()
                        },
                        {
                            "value": statuses.statusActiveAgreement.getStatus(),
                            "label": statuses.statusActiveAgreement.getStatusSuffixString()
                        }
                    ]
                }


            });
            console.log(model.activeStatusConstraints);


        },

        missingPrices: function () {
            this.isMissingPrices = true;
            domClass.remove(this.missingPricesAttachPoint, "hidden");
            this._setValidTransitions();
        },

        noMissingPrices: function () {
            this.isMissingPrices = false;
            domClass.add(this.missingPricesAttachPoint, "hidden");
            this._setValidTransitions();
        },

        selectChange: function (newStatus) {
            this._setTargetStatus(newStatus);
        },

        _updateActivePlanInfo: function (activePlan) {

            if (activePlan) {
                this.activePlanInfo.innerHTML = activePlanHelper.createActivePlanMessage(activePlan);
                domClass.remove(this.activePlanInfo, "hidden");
            } else {
                domClass.add(this.activePlanInfo, "hidden");
            }

        },

        postCreate: function () {

            this.inherited(arguments);
            var that = this;

            this.eventCleanup.push(on(this.inactiveAttachPoint, 'click', function () {
                that._selectInactive();
            }));

            this.eventCleanup.push(on(this.activeAttachPoint, 'click', function () {
                that._selectActive();
            }));

            this.eventCleanup.push(on(this.expiredAttachPoint, 'click', function () {
                that._selectExpired();
            }));

            this.eventCleanup.push(on(this.updateAttachPoint, 'click', function () {
                that._updateStatus();
            }));

            this.eventCleanup.push(on(this.cancelAttachPoint, 'click', function () {
                that._cancel();
            }));
        },

        destroy: function () {

            this.inherited(arguments);

            array.forEach(this.eventCleanup, function (listener) {
                listener.remove();
            });
        },

        startup: function () {

            var that = this, value, activePlanWatchFunction;

            this.inactiveSelect.startup();
            this.activeSelect.startup();

            activePlanWatchFunction = lang.hitch(this, function (activePlan) {
                this.activePlan = activePlan;
                this._updateActivePlanInfo(activePlan);
                this._setValidTransitions();
            });

            if (this.activePlanWatchProperty) {
                this.model.watch(this.activePlanWatchProperty, activePlanWatchFunction);

                if (this.model.propertyExist(this.activePlanWatchProperty)) {
                    activePlanWatchFunction(this.model.get(this.activePlanWatchProperty));
                }
            }

            this.model.watch(this.unableActivatePlanWatchProperty, function (unableActivatePlan) {
                that.unableActivatePlan = unableActivatePlan;
            });

            this.statusModel.watch("inactiveStatus", function (newStatus) {
                that.selectChange(newStatus);
            });

            this.statusModel.watch("activeStatus", function (newStatus) {
                that.selectChange(newStatus);
            });

            if (this._hasModelValue()) {
                value = this._getModelValue();
                if (value) {
                    this._status = statuses(value);
                }
            }
            if (!this._status) {
                this._status = statuses("Plan");
            }

            this._updateStatusModel();

            this._setTargetStatus(this._status.getStatus());

            this.inherited(arguments);

            this._reset();

        },

        _isUpdateOfActivePlanAllowed: function () {
            return !this._status.isActive();
        },

        _updateStatusModel: function () {

            if (this._status.isInactive()) {
                this.statusModel.set("inactiveStatus", this._status.getStatus());
            } else if (this._status.isActive()) {
                this.statusModel.set("activeStatus", this._status.getStatus());
            }

        },

        _selectInactive: function () {

            if (domClass.contains(this.inactiveAttachPoint, "disabled")) {
                return;
            }

            domClass.add(this.activeSelect.domNode, "invisible");
            domClass.remove(this.inactiveSelect.domNode, "invisible");

            domClass.add(this.inactiveAttachPoint, "active");
            domClass.remove(this.activeAttachPoint, "active");
            domClass.remove(this.expiredAttachPoint, "active");

            this.statusModel.set("selectedGroup", statuses.statusGroupInactive);
            this._setTargetStatus(this.inactiveSelect.get("value"));
        },

        _selectActive: function () {

            if (domClass.contains(this.activeAttachPoint, "disabled")) {
                return;
            }

            if (this._isUpdateOfActivePlanAllowed()) {
                domClass.remove(this.activeSelect.domNode, "invisible");
            } else {
                domClass.add(this.activeSelect.domNode, "invisible");
            }

            domClass.add(this.inactiveSelect.domNode, "invisible");

            domClass.remove(this.inactiveAttachPoint, "active");
            domClass.add(this.activeAttachPoint, "active");
            domClass.remove(this.expiredAttachPoint, "active");

            this.statusModel.set("selectedGroup", statuses.statusGroupActive);
            console.log('statuses.statusGroupActive');
            console.log(statuses.statusGroupActive);
            console.log('this.activeSelect.get("value")');
            console.log(this.activeSelect.get("value"));
            this._setTargetStatus(this.activeSelect.get("value"));
        },

        _selectExpired: function () {

            if (domClass.contains(this.expiredAttachPoint, "disabled")) {
                return;
            }

            domClass.add(this.activeSelect.domNode, "invisible");
            domClass.add(this.inactiveSelect.domNode, "invisible");

            domClass.remove(this.inactiveAttachPoint, "active");
            domClass.remove(this.activeAttachPoint, "active");
            domClass.add(this.expiredAttachPoint, "active");

            if (this._status.isTransitionValid(this._status.statusCompletedAgreement)) {
                this._setTargetStatus(statuses.statusCompletedAgreement.getStatus());
            } else if (this._status.isTransitionValid(this._status.statusCompletedPlan)) {
                this._setTargetStatus(statuses.statusCompletedPlan.getStatus());
            }
        },

        _setTargetStatus: function (statusName) {
            if (!this._status.isActive() && this.model.get("plan.data.type") !== 'cbm') {
                        // disable possibility to change to active plan
            }
            console.log(this.activeAttachPoint);

            this.targetStatus = statuses(statusName);

            if (this._status.isTransitionValid(statusName)) {
                domClass.remove(this.updateAttachPoint, "disabled");
                domClass.remove(this.buttonsAttachPoint, "padding-none");
                fx.wipeIn({node: this.buttonsAttachPoint}).play();
            } else {
                domClass.add(this.updateAttachPoint, "disabled");
                fx.wipeOut({node: this.buttonsAttachPoint}).play();
                domClass.add(this.buttonsAttachPoint, "padding-none");
            }

        },

        _setValidTransitions: function () {

            var chassis = this._getChassis();

            if (this._status.isReplacedOrExpired()) {
                this.activeLabel.innerHTML = statuses.statusActiveAgreement.getGroupStatusString();
                domClass.add(this.inactiveAttachPoint, "disabled");
                domClass.add(this.activeAttachPoint, "disabled");
                domClass.add(this.expiredAttachPoint, "disabled");
            }

            if (this._status.isActive()) {
                this.activeLabel.innerHTML = this._status.getMppStatusString();
                //MPP-913 (It should be possible to change status from active plan to active agreement)
                if (!this._isUpdateOfActivePlanAllowed()) {
                    domClass.add(this.activeSelect, "invisible");
                }
                domClass.add(this.inactiveAttachPoint, "disabled");
                domClass.remove(this.activeAttachPoint, "disabled");
                domClass.remove(this.expiredAttachPoint, "disabled");
            }

            if (this._status.isInactive() && !this.isMissingPrices && !this.activePlan && chassis && !this.unableActivatePlan) {
                this.activeLabel.innerHTML = statuses.statusActiveAgreement.getGroupStatusString();
                console.log('added statusActiveAgreement');
                domClass.remove(this.activeSelect, "invisible");
                domClass.remove(this.inactiveAttachPoint, "disabled");
                domClass.remove(this.activeAttachPoint, "disabled");
                domClass.add(this.expiredAttachPoint, "disabled");
            } else if (this._status.isInactive()) {
                this.activeLabel.innerHTML = statuses.statusActiveAgreement.getGroupStatusString();
                console.log('added statusActiveAgreement');
                domClass.remove(this.inactiveAttachPoint, "disabled");
                domClass.add(this.activeAttachPoint, "disabled");
                domClass.add(this.expiredAttachPoint, "disabled");
            }

        },

        _onModelUpdate: function (newValue) {
            if (newValue) {
                this._status = statuses(newValue);
                this._updateStatusModel();
                this._setTargetStatus(this._status.getStatus());
                this._setValidTransitions();
            }
        },

        _getChassis: function () {

            var chassis = null;

            if (this.chassisNumberWatchProperty) {
                if (this.model.propertyExist(this.chassisNumberWatchProperty)) {
                    chassis = this.model.get(this.chassisNumberWatchProperty);
                }
            }

            return chassis;
        },

        onOpen: function () {
            this._reset();

            var that = this, chassis = this._getChassis();

            if (this._status.isInactive() && this.activePlanWatchProperty && chassis) {
                topic.publish(constants.QueryActivePlanFlowEvent, that);
            }
        },

        _reset: function () {

            this._setTargetStatus(this._status.getStatus());
            this._updateStatusModel();
            this._setValidTransitions();

            if (this._status.isInactive()) {
                this._selectInactive();
            } else if (this._status.isActive()) {
                this._selectActive();
            } else {
                this._selectExpired();
            }
        },

        _updateStatus: function () {

            if (this.targetStatus.getStatus() === 'ActivePlan' && this.model.get("plan.data.agreement.autoUpdateICL")) {

                var errorMessage = {
                   header : "Error",
                   body : resourceBundle.errorOnlyForAgreements,
                   details : resourceBundle.errorUncheckICL
                };

                topic.publish(constants.FailureEvent, { name : constants.FailureEvent, data : errorMessage });
                return;
            }

            var activatePlan = this._status.isInactive() && this.targetStatus.isActive(),
                modules;

            function performUpdate() {
                this.model.set(this.watchProperty, this.targetStatus.getStatus()); // jshint ignore:line
                topic.publish(constants.ValueChangedEvent,
                    {
                        name: constants.ValueChangedEvent,
                        data: {
                            fieldName: this.name,  // jshint ignore:line
                            newValue: this.model.get(this.watchProperty), // jshint ignore:line
                            activatePlan: activatePlan
                        }
                    });
                this.popover.toggle();
            }

            if (this._status.isTransitionValid(this.targetStatus.getStatus())) {
                modules = this.model.get('plan.constraints.excludedModules');
                if (modules && modules.length && activatePlan) {
                    this.confirmationModal.open().then(performUpdate.bind(this));
                } else {
                    performUpdate.call(this);
                }
            }
        },

        _cancel: function () {
            this.popover.toggle();
        }
    });
});


<div>
	<div>
		<ul class="list-clickable list-tree margin-bottom">
			<li data-dojo-attach-point="inactiveAttachPoint" class="well well-xs">
				<div class="form-inline">
					<span class="icon-bookmark text-warning"></span>
					<h4 class="display-inline">${strings.statusGroupInactive}</h4>
					<div class="form-group width-50 pull-right">
						<select data-dojo-attach-point="inactiveSelect"
							data-dojo-type="mpp/widgets/Select"
							data-dojo-props="hasLabel : false, 'class' : 'select-sm', model : this.statusModel, constraintsProperty : 'inactiveStatusConstraints', watchProperty : 'inactiveStatus', ignoreReadOnly:true">
						</select>
					</div>
				</div>
			</li>
			<li data-dojo-attach-point="activeAttachPoint" class="well well-xs">
				<div class="form-inline">
					<span class="icon-bookmark text-success"></span>
			  		<h4 class="display-inline" data-dojo-attach-point="activeLabel"></h4>
			  		<div class="form-group width-50 pull-right">
						<select data-dojo-attach-point="activeSelect"
							data-dojo-type="mpp/widgets/Select"
							data-dojo-props="hasLabel : false, 'class' : 'select-sm', model : this.statusModel, constraintsProperty : 'activeStatusConstraints', watchProperty : 'activeStatus', ignoreReadOnly:true">
						</select>
					</div>
				</div>
			</li>
			<li data-dojo-attach-point="expiredAttachPoint" class="well well-xs">
				<span class="icon-bookmark text-danger"></span>
				<h4 class="display-inline">
					${strings.statusGroupExpired}
				</h4>
			</li>
		</ul>

		<div data-dojo-attach-point="activePlanInfo" class="alert alert-warning margin-none hidden">

		</div>

		<div data-dojo-attach-point="missingPricesAttachPoint" class="alert alert-warning margin-none hidden">
			${strings.missingPricesInStatusWarning}
		</div>

	</div>
	<div data-dojo-attach-point="buttonsAttachPoint" class="popover-footer text-right">
		<button data-dojo-attach-point="updateAttachPoint" class="btn btn-primary btn-sm">${strings.updateStatus}</button>
		<button data-dojo-attach-point="cancelAttachPoint" class="btn btn-default btn-sm">${strings.cancel}</button>
	</div>
	<div data-dojo-attach-point="confirmationModal"
		 data-dojo-type="mpp/widgets/ExcludedModulesConfirmationModal"
		 data-dojo-props="model : this.model">
	</div>
</div>







MPP-1616 - occurenceType
5405768
http://localhost:3010/flexiblePlan.html?code=cbm%2F17858d9e-435f-e811-90fa-0050569eea9a